class Solution {
    public int[] searchRange(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return new int[] {-1, -1};
        }
        return new int[] {
            this.search(nums, target, 0, nums.length - 1, true),
            this.search(nums, target, 0, nums.length - 1, false),
        };
    }
    
    private int search(int[] nums, int target, int l, int r, boolean findLeft) {
        if (l == r) {
            if (nums[l] == target) {
                return l;
            }
            return -1;
        }
        if (l > r) {
            return -1;
        }
        
        if (findLeft) {
            int m = (l + r) / 2;
            if (nums[m] >= target) {
                return this.search(nums, target, l, m, findLeft);
            } else {
                return this.search(nums, target, m + 1, r, findLeft);
            }
        } else { // find right
            int m = (l + r + 1) / 2;
            if (nums[m] <= target) {
                return this.search(nums, target, m, r, findLeft);
            } else {
                return this.search(nums, target, l, m - 1, findLeft);
            }
        }
    }
}
