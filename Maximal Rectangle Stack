class Solution {
    public int maximalRectangle(char[][] matrix) {
        if (matrix == null) {
            return 0;
        }
        int m = matrix.length;
        if (m == 0) {
            return 0;
        }
        int n = matrix[0].length;
        if (n == 0) {
            return 0;
        }
        
        int max_area = 0;
        int[] height = new int[n];
        Stack<Integer> stack = new Stack<Integer>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == '1') {
                    height[j]++;
                } else {
                    height[j] = 0;
                }
            }
           
            stack.push(-1);
            for (int j = 0; j < n; j++) {
                int left = stack.peek();
                while (left != -1 && height[left] > height[j]) {
                    int top = stack.pop();
                    left = stack.peek();
                    int area = height[top] * (j - left - 1);
                    max_area = Math.max(max_area, area);
                }
                stack.push(j);
            }
            while (true) {
                int top = stack.pop();
                if (top == -1) {
                    break;
                }
                int left = stack.peek();
                int area = height[top] * (n - left - 1);
                max_area = Math.max(max_area, area);
            }
        }
        
        return max_area;
    }
}
