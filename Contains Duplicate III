class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if (nums == null || nums.length == 0 || k <= 0 || t < 0) {
            return false;
        }
        int len = nums.length;
        k = Math.min(k, len - 1);
        
        TreeSet<Integer> set = new TreeSet<Integer>();
        for (int i = 0; i < len; i++) {
            Integer c = set.ceiling(nums[i]);
            if (c != null) {
                if (!(c == Integer.MAX_VALUE && nums[i] < 0) && c - nums[i] <= t) {
                    return true;
                }
            }
            Integer f = set.floor(nums[i]);
            if (f != null) {
                if (!(nums[i] == Integer.MAX_VALUE && f < 0) && nums[i] - f <= t ) {
                    return true;
                }
            }
            
            set.add(nums[i]);
            if (set.size() > k) {
                set.remove(nums[i - k]);
            }
        }
        return false;
    }
}
