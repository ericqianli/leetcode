class Solution {
    
    final int N = 100;
    
    int[][] ret = new int[N][N];
    int[][] step = new int[N][N];
    
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
        if (n <= 0) {
            return -1;
        }
        if (flights == null || flights.length == 0) {
            return -1;
        }
        if (K < 0) {
            return -1;
        }
        
        int len = flights.length;
        
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                step[i][j] = Integer.MAX_VALUE;
            }
        }

        for (int[] flight: flights) {
            step[flight[0]][flight[1]] = flight[2];
        }
        ret = step.clone();
        
        for (int i = 0; i < K; i++) {
            iterate();
        }
        
        int cost = ret[src][dst];
        if (cost == Integer.MAX_VALUE) {
            return -1;
        }
        return cost;
    }
    
    private void iterate() {
        int[][] temp = new int[N][N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                int cost = ret[i][j];
                for (int k = 0; k < N; k++) {
                    if (ret[i][k] != Integer.MAX_VALUE && step[k][j] != Integer.MAX_VALUE) {
                        cost = Math.min(cost, ret[i][k] + step[k][j]);
                    }
                }
                temp[i][j] = cost;
            }
        }
        ret = temp;
    }
}
