/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> ret = new ArrayList<Interval>();
        if (intervals == null || intervals.isEmpty()) {
            return ret;
        }
        int size = intervals.size();
        // sort input
        Collections.sort(intervals, new Comparator<Interval>() {
            @Override
            public int compare(Interval x, Interval y) {
                // null check
                return x.start - y.start;
            }
        });

        // enumerate
        Interval interval = intervals.get(0);
        int s = interval.start;
        int max_e = interval.end;
        for (int i = 1; i < size; i++) {
            interval = intervals.get(i);
            if (interval.start > max_e) {
                // conclude current bag of intervals
                ret.add(new Interval(s, max_e));
                s = interval.start;
                max_e = interval.end;
            } else {
                max_e = Math.max(max_e, interval.end);
            }
        }
        ret.add(new Interval(s, max_e));
        return ret;
    }
}
