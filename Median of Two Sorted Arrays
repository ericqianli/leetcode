class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if (nums1 == null || nums2 == null) {
            return 0.0;
        }
        int total_length = nums1.length + nums2.length;
        int left_index = (total_length - 1) / 2;
        int right_index = total_length / 2;
        
        int num1 = this.findNthElement(nums1, nums2, 0, nums1.length, 0, nums2.length, left_index);
        if (left_index == right_index) {
            return num1 * 1.0;
        }
        int num2 = this.findNthElement(nums1, nums2, 0, nums1.length, 0, nums2.length, right_index);
        return (num1 + num2) * 1.0 / 2;
    }
    
    public int findNthElement(int[] nums1, int[] nums2, int s1, int e1, int s2, int e2, int n) {
        if (nums1 == null || nums2 == null) {
            return 0;
        }
        // termination
        if (e1 - s1 == 0) {
            return nums2[n - s1];
        }
        if (e2 - s2 == 0) {
            return nums1[n - s2];
        }
        
        // recursion
        int m1 = (s1 + e1) / 2;
        int m2 = (s2 + e2) / 2;
        double val1 = nums1[m1];
        double val2 = nums2[m2];
        if (val2 < val1) {
            if (n <= m1 + m2) {
                return this.findNthElement(nums1, nums2, s1, m1, s2, e2, n);
            } else {
                return this.findNthElement(nums1, nums2, s1, e1, m2 + 1, e2, n);
            }
        } else {
            if (n <= m1 + m2) {
                return this.findNthElement(nums1, nums2, s1, e1, s2, m2, n);
            } else {
                return this.findNthElement(nums1, nums2, m1 + 1, e1, s2, e2, n);
            }
        }
        
    }
}
