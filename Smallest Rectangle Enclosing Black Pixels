

class Solution {
    public int minArea(char[][] image, int x, int y) {
        if (image == null || image.length == 0) {
            return 0;
        }
        int m = image.length;
        int n = image[0].length;
        if (n == 0) {
            return 0;
        }
        if (x < 0 || x >= m || y < 0 || y >= n) {
            return 0;
        }
        boolean[][] visited = new boolean[m][n];
        LinkedList<Point> queue = new LinkedList<Point>();
        visited[x][y] = true;
        queue.add(new Point(x, y));
        int x_min = x;
        int x_max = x;
        int y_min = y;
        int y_max = y;
        while (!queue.isEmpty()) {
            Point p = queue.removeFirst();
            if (p.x > 0) {
                if (image[p.x - 1][p.y] == '1' && !visited[p.x - 1][p.y]) {
                    visited[p.x - 1][p.y] = true;
                    queue.add(new Point(p.x - 1, p.y));
                    x_min = Math.min(x_min, p.x - 1);
                }
            }
            if (p.x < m - 1) {
                if (image[p.x + 1][p.y] == '1' && !visited[p.x + 1][p.y]) {
                    visited[p.x + 1][p.y] = true;
                    queue.add(new Point(p.x + 1, p.y));
                    x_max = Math.max(x_max, p.x + 1);
                }
            }
            if (p.y > 0) {
                if (image[p.x][p.y - 1] == '1' && !visited[p.x][p.y - 1]) {
                    visited[p.x][p.y - 1] = true;
                    queue.add(new Point(p.x, p.y - 1));
                    y_min = Math.min(y_min, p.y - 1);
                }
            }
            if (p.y < n - 1) {
                if (image[p.x][p.y + 1] == '1' && !visited[p.x][p.y + 1]) {
                    visited[p.x][p.y + 1] = true;
                    queue.add(new Point(p.x, p.y + 1));
                    y_max = Math.max(y_max, p.y + 1);
                }
            }
        }
        
        return (x_max - x_min + 1) * (y_max - y_min + 1);
    }
}

class Point {
    int x;
    int y;
    Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
