class Solution {
    public int maximalRectangle(char[][] matrix) {
        if (matrix == null) {
            return 0;
        }
        int m = matrix.length;
        if (m == 0) {
            return 0;
        }
        int n = matrix[0].length;
        if (n == 0) {
            return 0;
        }
        
        int max_area = 0;
        int[] height = new int[n+1]; // leave a 0 at tail for stack purpose
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == '1') {
                    height[j]++;
                } else {
                    height[j] = 0;
                }
            }
           
            int[] stack = new int[n+2]; // head for -1, tail for n.
            int top = 0;
            stack[top] = -1;
            for (int j = 0; j <= n; j++) { // note we have to include n to clear stack
                while (top > 0 && height[stack[top]] > height[j]) {
                    int h = height[stack[top--]];
                    int area = h * (j - stack[top] -1);
                    max_area = Math.max(max_area, area);
                }
                stack[++top] = j;
            }
        }
        
        return max_area;
    }
}
