/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int longestConsecutive(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int[] ret = longestConsecutiveHelper(root);
        return ret[0];
    }
    
    // returns two numbers
    // first: length of longest consecutive sequence anywhere in the tree
    // second: length of the longest consecutive sequence starting at root
    public int[] longestConsecutiveHelper(TreeNode root) {
        if (root == null) {
            return new int[] {0, 0};
        }
        
        int max_len_any = 0;
        int max_len_root = 1;
        
        if (root.left != null) {
            int[] left = longestConsecutiveHelper(root.left);
            max_len_any = left[0];
            if (root.val + 1 == root.left.val) {
                max_len_root = left[1] + 1;
            }
        }
        
        if (root.right != null) {
            int[] right = longestConsecutiveHelper(root.right);
            max_len_any = Math.max(max_len_any, right[0]);
            if (root.val + 1 == root.right.val) {
                max_len_root = Math.max(max_len_root, right[1] + 1);
            }
        }
        
        max_len_any = Math.max(max_len_any, max_len_root);
        
        return new int[] {max_len_any, max_len_root};
    }
}
